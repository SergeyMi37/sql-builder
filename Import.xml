<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for Windows (x86-32) 2015.2.1 (Build 705U)" ts="2017-01-11 08:23:06">
<Class name="gen.SQLBuilder">
<Super>%RegisteredObject</Super>
<TimeChanged>64294,29729.158075</TimeChanged>
<TimeCreated>64174,51856.58627</TimeCreated>

<Parameter name="Version">
<Default>0.0.3</Default>
</Parameter>

<Property name="Select">
<Type>%String</Type>
<Internal>1</Internal>
<InitialExpression>"*"</InitialExpression>
</Property>

<Property name="Update">
<Type>%String</Type>
<Internal>1</Internal>
</Property>

<Property name="From">
<Type>%String</Type>
<Internal>1</Internal>
</Property>

<Property name="Where">
<Type>%String</Type>
<Internal>1</Internal>
</Property>

<Property name="GroupBy">
<Type>%String</Type>
<Internal>1</Internal>
</Property>

<Property name="OrderBy">
<Type>%String</Type>
<Internal>1</Internal>
</Property>

<Property name="Statement">
<Type>%Integer</Type>
<Internal>1</Internal>
<InitialExpression>1</InitialExpression>
<Parameter name="DISPLAYLIST" value=",Select,Update,Insert,Delete"/>
<Parameter name="VALUELIST" value=",1,2,3,4"/>
</Property>

<Method name="Delete">
<FormalSpec>params:%String=""</FormalSpec>
<ReturnType>gen.SQLBuilder</ReturnType>
<Implementation><![CDATA[
	Set ..Select = ""
	Set ..Update = ""
	Set ..Statement = 3
	Quit $This
]]></Implementation>
</Method>

<Method name="Select">
<FormalSpec>params:%String=""</FormalSpec>
<ReturnType>gen.SQLBuilder</ReturnType>
<Implementation><![CDATA[
	If params'="" {
		Set matcher = ##class(%Regex.Matcher).%New("^(SELECT)\s")
		Set matcher.Text = $ZConvert(params,"U")
		Set:matcher.Locate() params = $Extract(params,8,*+1)
		
		Set auxList = $ListFromString(params,",")
		Set select = ""
		For k=1:1:$ListLength(auxList) {
			Set:$List(auxList,k)'="" $List(select,*+1) = $List(auxList,k)
		}
		Set ..Select = $ListToString(select,",")
	}
	Set ..Statement = 1
	Quit $This
]]></Implementation>
</Method>

<Method name="Update">
<ReturnType>gen.SQLBuilder</ReturnType>
<Implementation><![CDATA[
	Set ..Select = ""
	Set ..Statement = 2
	Quit $This
]]></Implementation>
</Method>

<Method name="Insert">
<ReturnType>gen.SQLBuilder</ReturnType>
<Implementation><![CDATA[
	Set ..Select = ""
	Set ..Statement = 4
	Quit $This
]]></Implementation>
</Method>

<Method name="Set">
<FormalSpec>args...</FormalSpec>
<ReturnType>gen.SQLBuilder</ReturnType>
<Implementation><![CDATA[
	Set result = ..GetStringPrepare(args...)
	Quit:result="" $This
	Set ..Update = ..Update _ $Select(..Update="":"",1:",") _ result
	Quit $This
]]></Implementation>
</Method>

<Method name="From">
<FormalSpec>pFrom:%String</FormalSpec>
<ReturnType>gen.SQLBuilder</ReturnType>
<Implementation><![CDATA[
	Set ..From = pFrom
	Quit $This
]]></Implementation>
</Method>

<Method name="Where">
<FormalSpec>args...</FormalSpec>
<ReturnType>gen.SQLBuilder</ReturnType>
<Implementation><![CDATA[
	Set result = ..GetStringPrepare(args...)
	Quit:result="" $This
	Quit ..WhereInterno(result)
]]></Implementation>
</Method>

<Method name="WhereInterno">
<Internal>1</Internal>
<FormalSpec>pWhere:%String,pAndOr=0</FormalSpec>
<Private>1</Private>
<ReturnType>gen.SQLBuilder</ReturnType>
<Implementation><![CDATA[
	If ..Where=""{
		Set ..Where = pWhere
	} Else {
		Set:..Where'="" ..Where = ..Where _ $Case(pAndOr,0:" AND ",1:" OR ") _ pWhere
	}
	Quit $This
]]></Implementation>
</Method>

<Method name="Or">
<FormalSpec>args...</FormalSpec>
<ReturnType>gen.SQLBuilder</ReturnType>
<Implementation><![CDATA[
	Set result = ..GetStringPrepare(args...)
	Quit:result="" $This
	Quit ..WhereInterno(result,1)
]]></Implementation>
</Method>

<Method name="And">
<FormalSpec>args...</FormalSpec>
<ReturnType>gen.SQLBuilder</ReturnType>
<Implementation><![CDATA[
	Set result = ..GetStringPrepare(args...)
	Quit:result="" $This
	Quit ..WhereInterno(result)
]]></Implementation>
</Method>

<Method name="Between">
<FormalSpec>pProp,pInferior,pSuperior,pType=0</FormalSpec>
<ReturnType>gen.SQLBuilder</ReturnType>
<Implementation><![CDATA[
	Set sql = "(" _ pProp _ " BETWEEN " _ pInferior _ " AND " _ pSuperior _ ")"
	Quit ..WhereInterno(sql)
]]></Implementation>
</Method>

<Method name="Join">
<FormalSpec>table:%String,prop:%String</FormalSpec>
<ReturnType>gen.SQLBuilder</ReturnType>
</Method>

<Method name="GetStringPrepare">
<ClassMethod>1</ClassMethod>
<FormalSpec>args...</FormalSpec>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set output = ""
	Try {
		Set output = $Get(args(1))
		Set count = $Order(args(""),-1)
		
		Set matcher = ##class(%Regex.Matcher).%New("\?")
		Set matcher.Text = output
		
		If count > 1 {
			Set k = 2, sanitize = "'"
			
			Set:$Find($ZConvert(output,"U"),"LIKE")>0 sanitize = "#"
			
			While matcher.Locate() {
				Set matcher.Text = matcher.ReplaceFirst(sanitize_$Replace($Get(args(k)),"'","")_sanitize)
		        Set k = $Increment(k)
		    }
		    
		    Set output = matcher.Text
		    Set:$Find(output,"''")>0 output = ""
		    Set:$Find(output,"##")>0 output = ""
		    Set:output'="" output = $Replace(output,"#","")
		} Else {
			Set:matcher.Match(output) output = ""
		}
	} Catch {
		Set output = ""
	}
	Quit output
]]></Implementation>
</Method>

<Method name="Order">
<FormalSpec>pOrderBy:%String</FormalSpec>
<ReturnType>gen.SQLBuilder</ReturnType>
<Implementation><![CDATA[	Quit ..OrderBy(pOrderBy)
]]></Implementation>
</Method>

<Method name="OrderBy">
<FormalSpec>pOrderBy:%String</FormalSpec>
<ReturnType>gen.SQLBuilder</ReturnType>
<Implementation><![CDATA[
	Set:..OrderBy'="" ..OrderBy = ..OrderBy _ "," _ pOrderBy
	Set:..OrderBy="" ..OrderBy = pOrderBy
	Quit $This
]]></Implementation>
</Method>

<Method name="GroupBy">
<FormalSpec>pGroupBy:%String</FormalSpec>
<ReturnType>gen.SQLBuilder</ReturnType>
<Implementation><![CDATA[
	Set:..GroupBy'="" ..GroupBy = ..GroupBy _ "," _ pGroupBy
	Set:..GroupBy="" ..GroupBy = pGroupBy
	Quit $This
]]></Implementation>
</Method>

<Method name="AndIf">
<FormalSpec>pCondition,args...</FormalSpec>
<ReturnType>gen.SQLBuilder</ReturnType>
<Implementation><![CDATA[
	Quit:pCondition ..And(args...)
	Quit $This
]]></Implementation>
</Method>

<Method name="OrIf">
<FormalSpec>pCondition,args...</FormalSpec>
<ReturnType>gen.SQLBuilder</ReturnType>
<Implementation><![CDATA[
	Quit:pCondition ..Or(args...)
	Quit $This
]]></Implementation>
</Method>

<Method name="WhereIf">
<FormalSpec>pCondition,args...</FormalSpec>
<ReturnType>gen.SQLBuilder</ReturnType>
<Implementation><![CDATA[
	Quit:pCondition ..Where(args...)
	Quit $This
]]></Implementation>
</Method>

<Method name="GetSQL">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Quit:..Statement=1 ..GetSelectStatement()
	Quit:..Statement=2 ..GetUpdateStatement()
	Quit:..Statement=3 ..GetInsertStatement()
	Quit:..Statement=4 ..GetDeleteStatement()
]]></Implementation>
</Method>

<Method name="GetSelectStatement">
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set sql = "Select " _ ..Select
	Set sql = sql _ " From " _ ..From
	Set:..Where'="" sql = sql _ " Where " _ ..Where
	Set:..GroupBy'="" sql = sql _ " Group By " _ ..GroupBy
	Set:..OrderBy'="" sql = sql _ " Order By " _ ..OrderBy
	Quit sql
]]></Implementation>
</Method>

<Method name="GetDeleteStatement">
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set sql = "Delete "
	Set sql = sql _ " From " _ ..From
	Set:..Where'="" sql = sql _ " Where " _ ..Where
	Quit sql
]]></Implementation>
</Method>

<Method name="GetUpdateStatement">
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set sql = "Update " _ ..From 
	Set sql = sql _ " SET " _ ..Update 
	Set:..Where'="" sql = sql _ " Where " _ ..Where
	Quit sql
]]></Implementation>
</Method>

<Method name="GetInsertStatement">
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set sql = "Insert "
	//Set sql = sql _ " From " _ ..From
	//Set:..Where'="" sql = sql _ " Where " _ ..Where
	Quit sql
]]></Implementation>
</Method>

<Method name="Execute">
<FormalSpec>*tSC:%Status,Args...</FormalSpec>
<ReturnType>%ResultSet</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
		Set statement = ##class(%SQL.Statement).%New()
		Set tSC = statement.%Prepare(..GetSQL())
		Set tRS = statement.%Execute(Args...)
	}
	Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
	}
	Quit tRS
]]></Implementation>
</Method>

<Method name="%OnNew">
<FormalSpec>table:%String=""</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	Set ..From = table
	Quit $$$OK
]]></Implementation>
</Method>
</Class>

</Export>
